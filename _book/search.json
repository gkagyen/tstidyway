[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Timeseries Analysis - the Tidyverse Way",
    "section": "",
    "text": "Welcome\nA practical, beginner-friendly guide using tsibble, fable and friends\nHave you ever looked at a line chart of sales, website traffic, stock prices or weather patterns and thought, ‚ÄúI wonder what happens next?‚Äù ‚Äì then you are in the right place.\nIn this book, we will take your basic R skills and transform them into real-world forecasting power ‚Äì all using the clean modern tools of the Tidyverse. No black-box algorithms or confusing jargon. Just a step by step journey into understanding patterns over time and predicting the future with confidence.\nWhether you are a student, analyst or data enthusiast, time series skills are essential in your field ‚Äì and surprisingly accessible. By the end of this guide, you will be able to:\nSo grab your pen and paper (whatever it is you want to grab üòÅ), fire up RStudio and let‚Äôs turn your curiosity into prediction. üìä‚ú®",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Timeseries Analysis - the Tidyverse Way",
    "section": "",
    "text": "Visualise trends and seasonality like a pro\nDecompose complex patterns\nBuild and compare forecasts using smart, automated models\nAnd most importantly explain your results clearly",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1¬† Introduction",
    "section": "",
    "text": "1.1 What is Time Series Data?\nTime series data consists of observations recorded over time, usually at regular intervals (e.g., daily, monthly, yearly). Some examples include:\nWhat makes time series special is that time is not just a variable, It carries important structure and dependencies. What happened today can depend on what happened yesterday, last month or even last year. This temporal uniqueness is what makes time series very powerful.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#what-is-time-series-data",
    "href": "intro.html#what-is-time-series-data",
    "title": "1¬† Introduction",
    "section": "",
    "text": "Monthly rainfall totals\nDaily COVID-19 cases\nHourly temperature readings\nYearly population counts",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#why-time-series-analysis-matters",
    "href": "intro.html#why-time-series-analysis-matters",
    "title": "1¬† Introduction",
    "section": "1.2 Why Time Series Analysis Matters",
    "text": "1.2 Why Time Series Analysis Matters\nTime series analysis helps us to understand the past, monitor the present, and predict the future. Some real world examples are:\n\nPublic Health: Forecasting disease outbreaks or hospital admissions\nFinance: Predicting stock prices, currency exchange rates, or sales revenue.\nEnvironmental Science: Analysing temperature trends or rainfall patterns for climate studies\nEngineering: Monitoring sensor data to detect faults or changes in performance\n\nIn many cases, this analysis supports decision making ‚Äî whether it is planning resources, anticipating risks, or detecting unusual patterns.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#traditional-vs.-tidy-approach",
    "href": "intro.html#traditional-vs.-tidy-approach",
    "title": "1¬† Introduction",
    "section": "1.3 Traditional vs.¬†Tidy Approach",
    "text": "1.3 Traditional vs.¬†Tidy Approach\nHistorically, time series in R has been handled using ts objects and packages like forecast. These are still useful, but they do not fit perfectly with the modern tidy philosophy; data frames, pipelines and consistent syntax.\nWe will follow the tidy time series workflow using the tidyverse ecosystem. The workflow uses packages from the tidyverts ecosystem:\n\ntsibble: A tidy data structure for time series (like a tibble but with special time handling)\nfable: For forecasting models (ARIMA, ETS, etc) in a tidy way.\nfeasts: For exploratory analysis (seasonal plots, decomposition, autocorrelation).\nlubridate: For working with dates and times.\nggplot2: For beautiful and flexible visualisations\ndplyr/tidyr/tibble: For general data wrangling\n\n\n1.3.1 The Tidy Time Series Workflow\nThe tidyverse ecosystem in R emphasises clean, readable code and consistent data structure. For time series, the modern approach uses the tidyverts suite of packages.\nThe typical flow we will follow includes:\n\nüîß Data Preparation: Load and tidy data. Convert the data to a tsibble object so R knows how to handle time.\nüîç Explore: Visualise trends, seasonality, patterns\nüß© Decompose: Break down components (trends, seasonal, noise)\nüñ•Ô∏è Model: Fit forecasting models (simple ‚Äî&gt; advanced)\nüìà Forecast: Generate future predictions\nüìè Evaluate: Check how good the forecasts are (accuracy assessment)\n\nThis workflow is clean, consistent and integrates smoothly with other tidyverse tools you might already know.\n\n\n\n\n\n\nTip\n\n\n\ntidyverse: collection of packages designed for general data science\ntidyverts: collection of packages specifically for time series analysis\nThey all follow the tidy philosophy, structure and grammar\n\n\n\n\n1.3.2 Data We Will Use\nWe will start with some built-in datasets from the tsibble package so every on can follow along without downloading external files:\n\naus_production ‚Äî Quarterly production values for Australian industries.\ntourism ‚Äî Quarterly overnight trips in different Australian regions.\n\nLater, we shall also show how to use real-life datasets ‚Äî for example, population growth or GDP growth data from Ghana, to make the examples relatable and practical\nYou can download the datasets used here gh_data.csv .\n\n\n1.3.3 What You Will Need to Follow Along\n\nBasic R Knowledge: You should know how to load packages, run functions, and work with data frames\nRStudio installed for a smooth workflow\nInternet connection (for package installation and possible data download)\n\n\n1.3.3.1 By the end of this tutorial, you will be able to:\n\nHandle date/time data with ease\nExplore time series visually and statistically\nBuild forecasts using tidyverse-style functions\nApply your skills to your own datasets in research or work",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setting Up",
    "section": "",
    "text": "Before diving into analysis, let;s make sure we have all the tools we need to get ready. We need to set up our R environment with the right tools. The tidyverts ecosystem ‚Äî built around the Tidyverse ‚Äî makes time series analysis intuitive, consistent and visual.\n\n\n\n\n\n\n\nTidyverts Package Collection\n\n\n\n\n\nTidyverse Package Collection\n\n\nThis section will cover installing and loading the packages we will use and checking that your R environment is prepared for a smooth time series work\nWe will address the following:\n\n2¬† Required Packages: This part will cover all the packages we will need, how to install and load them for use in our R environment.\n3¬† Setting Up Your RStudio Environment: Here you will see how to keep things organised in a more seamless and orderly manner on your system.\n\nAfter going through this section your R environment will be a fully-equipped time series analysis workshop. You will understand the role of each major package (tsibble, fable, feasts) and how they interoperate.\nMore importantly you will get the practical knowledge to install and load them correctly, setting a stable foundation for every analysis you perform in the following chapters.",
    "crumbs": [
      "Setting Up"
    ]
  },
  {
    "objectID": "required-packages.html",
    "href": "required-packages.html",
    "title": "2¬† Required Packages",
    "section": "",
    "text": "2.1 Installing the Packages\nAs stated earlier we will be using a combination of tidyverse and time series specific packages (tidyverts)\nThere is another supporting package in the tidyverts ecosystem caled fabletools. This is a supporting package that provides some underlying tools for the fables package\nTo install the above packages, run the following code once in your R console:\ninstall.packages(c(\"tidyverse\", \"tsibble\", \"fable\", \"feasts\", \"readxl\"))",
    "crumbs": [
      "Setting Up",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Required Packages</span>"
    ]
  },
  {
    "objectID": "required-packages.html#installing-the-packages",
    "href": "required-packages.html#installing-the-packages",
    "title": "2¬† Required Packages",
    "section": "",
    "text": "Tip\n\n\n\nIf you already have them installed, you do not need to reinstall. You can check if a package is installed by typing \"fable\" %in% installed.packages()\n\n\n\n2.1.1 Loading the Packages\nAfter installing any package you have to load it before it becomes available for use. Each time you start a new R session, you will need to load the packages you will use again. Doing it correctly saves headaches. You can load a package in R with the library() function.\n\n# Load all packages\nlibrary(tidyverse)          # Core data wrangling + visualisation\nlibrary(tsibble)            # Tidy time series structure\nlibrary(fable)              # Forecasting\nlibrary(feasts)             # Time series exploration tools\nlibrary(readxl)             # Importing Excel files\n\nThink of the install command as buying a tool and placing it in your garage (your computer‚Äôs library). The library() function is like grabbing the tool from your garage and bringing it to your workbench (your current R session) so you can use it\n\n\n\n\n\n\nTip\n\n\n\nIf you see a message like ‚Äúthere is no package called‚Ä¶‚Äù, it means you have not installed it yet. Go back to the installation step.",
    "crumbs": [
      "Setting Up",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Required Packages</span>"
    ]
  },
  {
    "objectID": "environment-setup.html",
    "href": "environment-setup.html",
    "title": "3¬† Setting Up Your RStudio Environment",
    "section": "",
    "text": "3.1 Quick Test Run\nWe can go ahead and start building our time series analysis task right away after installing and loading the needed packages. However, to keep things organised.\nLet‚Äôs run a quick test to ensure everything is working. We shall use a built in dataset\n# Use the 'us_employment' dataset from the fpp3 package built into the tsibble package\nlibrary(fpp3)\nhead(us_employment)\n\n# Lets see if it is a proper tsibble and we can plot it\nus_employment |&gt; \n  filter(Title == \"Total Private\") |&gt; \n  autoplot(Employed) +\n  labs(title = \"US Total Private Employment\",\n       y = \"People\")\nThis ‚Äúhead(us_employment)‚Äù line of code should show you a tidy time series dataset with index (time column) and key (group identifier). The codes that follow, if it runs without errors, should also produce a time series plot.\nIf you see all the things mentioned earlier, congratulations! Your environment is ready.",
    "crumbs": [
      "Setting Up",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Setting Up Your RStudio Environment</span>"
    ]
  },
  {
    "objectID": "environment-setup.html#quick-test-run",
    "href": "environment-setup.html#quick-test-run",
    "title": "3¬† Setting Up Your RStudio Environment",
    "section": "",
    "text": "Note\n\n\n\nThe fpp3 package is a collection of tools and datasets (which we have already seen) for time series forecasting. It was built to accompany the third edition of the book Forecasting: Principles and Practice by Rob J Hyndman and George Athanasopoulos .",
    "crumbs": [
      "Setting Up",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Setting Up Your RStudio Environment</span>"
    ]
  },
  {
    "objectID": "tidy-timeseries.html",
    "href": "tidy-timeseries.html",
    "title": "Working with Time Series Data",
    "section": "",
    "text": "The tidy Approach to Time Series\nTime is the most fundamental dimension in data analysis, yet working with temporal data has traditionally been one of the most frustrating aspects of data science. If you have ever felt less enthusiastic trying to force dates and data into a standard data frame, then here is some good news for you. The Tidyverse provides a coherent, intuitive framework for taming the chaos of temporal data.\nIn this section, we will explore how to work with time series data using the tidy data principles. Rather than wrestling with complex time series objects or memorising some mysterious date formatting codes, you will learn to treat temporal data as just another type of structured data that can be manipulated, visualised and modelled using the same consistent grammar you already know.\n%%{init: {'themeVariables': { 'fontSize': '15pt'}}}%%\n\nflowchart TD\n    A[Raw Time Series Data] --&gt; B{Data Structure}\n    B --&gt;|Traditional| C[Specialized TS Objects]\n    B --&gt;|Tidy| D[tsibble]\n    \n    C --&gt; E[Limited Functions]\n    C --&gt; F[Complex Syntax]\n    C --&gt; G[Isolated Workflow]\n    \n    D --&gt; H[dplyr Verbs]\n    D --&gt; I[ggplot2 Graphics]\n    D --&gt; J[Tidyverse Integration]\n    \n    H --&gt; K[filter, mutate, summarize...]\n    I --&gt; L[geom_line, facet_wrap...]\n    J --&gt; M[Seamless Data Pipeline]\n    \n    K --&gt; N[Flexible Analysis]\n    L --&gt; N\n    M --&gt; N\n    \n    E --&gt; O[Rigid Analysis]\n    F --&gt; O\n    G --&gt; O\n    \n    style D fill:#e1f5fe\n    style N fill:#c8e6c9\n    style O fill:#ffcdd2\nTraditional time series analysis in R has been handled using ts objects and packages like forecast. These are still useful, but they do not fit perfectly with the modern tidyverse philosophy. The tidy approach treats time series as regular dataframes which extends the tibble data structure by incorporating time series components (index and key).\nTable¬†1: A tidy time series data structure (tsibble)\n\n\n# A tsibble: 6 x 5 [1Q]\n# Key:       Region, State, Purpose [1]\n  Quarter Region   State           Purpose  Trips\n    &lt;qtr&gt; &lt;chr&gt;    &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt;\n1 1998 Q1 Adelaide South Australia Business  135.\n2 1998 Q2 Adelaide South Australia Business  110.\n3 1998 Q3 Adelaide South Australia Business  166.\n4 1998 Q4 Adelaide South Australia Business  127.\n5 1999 Q1 Adelaide South Australia Business  137.\n6 1999 Q2 Adelaide South Australia Business  200.\nThis approach unlocks the full power of dplyr's data manipulation verbs, ggplot2's visualisation capabilities and the broader tidyverse ecosystem for temporal data analysis.",
    "crumbs": [
      "Working with Time Series Data"
    ]
  },
  {
    "objectID": "tidy-timeseries.html#what-we-will-cover",
    "href": "tidy-timeseries.html#what-we-will-cover",
    "title": "Working with Time Series Data",
    "section": "What We will Cover",
    "text": "What We will Cover\nThis section is organised into three complementary chapters that builds your time series skills progressively.\n\n4¬† Tidy Time Series Basics: This chapter will help you master the fundamental building blocks of time series data analysis. It establishes the foundation for all subsequent time series work.\n5¬† Dealing with Time Gaps and Irregularities: Real world time series data is messy, with missing observations, irregular intervals and unexpected gaps. This chapter teaches you to identify understand and handle these imperfections.\n6¬† Importing Data and Creating a tsibble: Time series data comes from everywhere ‚Äì csv files, APIs, databases and excel files. Some of these sources might have inconsistent date formats, dates being stored as strings and time zones being mixed up. In this chapter you will be provided with practical strategies for importing temporal data and handling different date formats\n\nThroughout this section we will primarily use these essential packages lubridate, tsibble, dplyr, tidyr. By the end of this section you will have mastered the crucial first step in any time series analysis: creating a valid, gap-aware tsibble from raw data. This is not just busy work, it is about building a solid foundation.\nA well structured tsibble ensures that every analysis, visualisation, and forecast that follows is built on accurate and understandable temporal data.",
    "crumbs": [
      "Working with Time Series Data"
    ]
  },
  {
    "objectID": "timeseries-basics.html",
    "href": "timeseries-basics.html",
    "title": "4¬† Tidy Time Series Basics",
    "section": "",
    "text": "4.1 What is a tsibble\nAt its core, a time series is just a data where when it was collected is a crucial part of the story. It is a sequence of data points indexed in time and order. Regardless, a time series should still be a tidy data frame. In a tidy dataset (following Hadley Wickham‚Äôs principles), Each row is an observation, each column is a variable.\nA tsibble (short for ‚Äútidy temporal tibble‚Äù) is a special data frame for time series. It extends the tibble data structure by formally declaring one column as the index (the time variable) and optionally, one or more columns as key(s) (unique identifiers for different series)",
    "crumbs": [
      "Working with Time Series Data",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Tidy Time Series Basics</span>"
    ]
  },
  {
    "objectID": "timeseries-basics.html#what-is-a-tsibble",
    "href": "timeseries-basics.html#what-is-a-tsibble",
    "title": "4¬† Tidy Time Series Basics",
    "section": "",
    "text": "4.1.1 Key terminologies\nIndex: The variable (usually a date/time) that defines the time order of observations\nKey: A variable (or combination of variables) that uniquely identifies different time series within a single table e.g.¬†country, stock_symbol etc.\nInterval: The regular frequency of the measurements e.g.¬†daily, monthly, quarterly etc.\nTo illustrate what we just discussed below is a standard dataframe with a date column. This data is not time aware yet (not a time series)\n\n\n# A tibble: 4 √ó 3\n  date       product sales\n  &lt;date&gt;     &lt;chr&gt;   &lt;dbl&gt;\n1 2023-01-01 A         120\n2 2023-01-02 A         145\n3 2023-01-01 B          88\n4 2023-01-02 B         102\n\n\na tsibble on the other hand is self-aware. It knows its index and its key, unlocking powerful analysis tool. compare the table below. The [1D] beside the tsibble dimension represents the interval (daily)\n\n\n# A tsibble: 4 x 3 [1D]\n# Key:       product [2]\n  date       product sales\n  &lt;date&gt;     &lt;chr&gt;   &lt;dbl&gt;\n1 2023-01-01 A         120\n2 2023-01-02 A         145\n3 2023-01-01 B          88\n4 2023-01-02 B         102",
    "crumbs": [
      "Working with Time Series Data",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Tidy Time Series Basics</span>"
    ]
  },
  {
    "objectID": "timeseries-basics.html#creating-and-converting-data-into-a-tsibble",
    "href": "timeseries-basics.html#creating-and-converting-data-into-a-tsibble",
    "title": "4¬† Tidy Time Series Basics",
    "section": "\n4.2 Creating and Converting Data into a tsibble\n",
    "text": "4.2 Creating and Converting Data into a tsibble\n\ncreating a tsibble follows the same procedure as creating a normal data frame using the tsibble() function or simply from an existing data frame or tibble using the as_tsibble() function.\nAs explained earlier, these two functions require you to specify at least one of these two things (index or key) or both depending on your data.\nWe see how to create a tsibble from using tsibble() and as_tsibble below\n\n# single time series\ntsibble(\n  year = 2010:2050,\n  value = rnorm(41),\n  index = year\n)\n\n# A tsibble: 41 x 2 [1Y]\n    year  value\n   &lt;int&gt;  &lt;dbl&gt;\n 1  2010  0.230\n 2  2011  0.938\n 3  2012 -0.294\n 4  2013 -1.48 \n 5  2014 -0.733\n 6  2015  1.64 \n 7  2016  1.55 \n 8  2017 -0.683\n 9  2018 -1.00 \n10  2019  2.02 \n# ‚Ñπ 31 more rows\n\n\nThe above code creates a simple time series data using the tsibble() function, exactly like creating a dataframe. Indicating the index variable distinguishes a tsibble from a tibble.\nNow we will create a tsibble from the as_tsibble() function using an existing tibble\n\n# creating a tsibble from monthly data sales\n# sales come from two different shops\nsales_data &lt;- tibble(\n  Date = ymd(c('2025-01-01','2025-02-01','2025-03-01','2026-04-01','2025-05-01','2025-01-01','2025-02-01','2025-03-01','2025-04-01','2025-05-01')),\n  Store = rep(c('Phone Shop', 'Beauty Shop'), each = 5),\n  Sales = c(225, 150, 130, 90, 220, 190, 145, 180, 110, 180)\n)\nprint(sales_data)\n\n# A tibble: 10 √ó 3\n   Date       Store       Sales\n   &lt;date&gt;     &lt;chr&gt;       &lt;dbl&gt;\n 1 2025-01-01 Phone Shop    225\n 2 2025-02-01 Phone Shop    150\n 3 2025-03-01 Phone Shop    130\n 4 2026-04-01 Phone Shop     90\n 5 2025-05-01 Phone Shop    220\n 6 2025-01-01 Beauty Shop   190\n 7 2025-02-01 Beauty Shop   145\n 8 2025-03-01 Beauty Shop   180\n 9 2025-04-01 Beauty Shop   110\n10 2025-05-01 Beauty Shop   180\n\n\n\n# We use as_tsibble to convert the tibble to a tsibble\n# the date column becomes the index and the store column the key\nsales_data_ts &lt;- sales_data |&gt; \n  mutate(Date = yearmonth(Date)) |&gt;\n  as_tsibble(\n    index = Date,\n    key = Store\n  )\nprint(sales_data_ts)\n\n# A tsibble: 10 x 3 [1M]\n# Key:       Store [2]\n       Date Store       Sales\n      &lt;mth&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1 2025 Jan Beauty Shop   190\n 2 2025 Feb Beauty Shop   145\n 3 2025 Mar Beauty Shop   180\n 4 2025 Apr Beauty Shop   110\n 5 2025 May Beauty Shop   180\n 6 2025 Jan Phone Shop    225\n 7 2025 Feb Phone Shop    150\n 8 2025 Mar Phone Shop    130\n 9 2025 May Phone Shop    220\n10 2026 Apr Phone Shop     90\n\n\nWe now have our sales data in a time aware tsibble format. The yearmonth() is an index function to represent our Date in a year-month format.\n\n4.2.1 Practice tsibble conversion\nHere we will learn how to convert real world data into a tsibble. The data we will use is a time series data for Ghana containing certain world bank indicators. The data can be found here gh_data.csv. The data comes in a wide format (where years are columns). To make it tidy, where each row represents one indicator so that we a year and value column, we first need to reshape it into a long format\nWe will use pivot_longer from tidyr to reshape the data\n\n# load data\ngh_data_raw &lt;- read_csv('data/gh_data.csv', show_col_types = FALSE) \n  \n# convert wide data to long\ngh_data_long &lt;- gh_data_raw |&gt; \n  pivot_longer(\n    cols = starts_with(c('19','20')), # select all date columns\n    names_to = \"Year\",                # New column for years\n    values_to = 'Value'               # New column for values\n  )\n\n# View the first few rows\nhead(gh_data_long)\n\n# A tibble: 6 √ó 5\n  `Country Name` `Indicator Name` `Indicator Code` Year    Value\n  &lt;chr&gt;          &lt;chr&gt;            &lt;chr&gt;            &lt;chr&gt;   &lt;dbl&gt;\n1 Ghana          Population_total SP.POP.TOTL      1960  6961215\n2 Ghana          Population_total SP.POP.TOTL      1961  7162667\n3 Ghana          Population_total SP.POP.TOTL      1962  7337375\n4 Ghana          Population_total SP.POP.TOTL      1963  7514714\n5 Ghana          Population_total SP.POP.TOTL      1964  7695739\n6 Ghana          Population_total SP.POP.TOTL      1965  7882606\n\n\nSuccess! Now each row is an observation of an indicator in a given year\nThe next step is to convert the Year to a Proper Date. Right now Year is a character. We need it as a date so tsibble can understand time ordering. we will use the lubridate package functions and convert it to a Date object (assuming January 1st of each year).\n\n# convert year to date\ngh_data_long &lt;-  gh_data_long |&gt; \n  mutate(\n    Year = as.integer(Year),                      # convert to integer number\n    Date = lubridate::ymd(paste0(Year, \"-01-01\")), # Create date:Jan 1 of each year\n    .after = Year                                 # add new Date column after year column\n  )\n\n# check structure\nstr(gh_data_long$Date)\n\n Date[1:1430], format: \"1960-01-01\" \"1961-01-01\" \"1962-01-01\" \"1963-01-01\" \"1964-01-01\" ...\n\n\nNow Date is a proper Date object essential for time series analysis.\nFinally we can convert our data to a time series dataframe (tsibble) that is time aware of - index (time)and keys (unique series identifiers). In our case the Date column is our index and the Indicator_name becomes our index since we have multiple time series -population, life expectancy etc.\n\n# convert data to tsibble\ngh_ts &lt;- gh_data_long |&gt; \n  as_tsibble(\n    index = Date,              # Time index\n    key = `Indicator Name`     # Key column: each indicator is a separate series\n  )\n\n# View the tsibble\ngh_ts\n\n# A tsibble: 1,430 x 6 [1D]\n# Key:       Indicator Name [22]\n   `Country Name` `Indicator Name`      `Indicator Code`  Year Date        Value\n   &lt;chr&gt;          &lt;chr&gt;                 &lt;chr&gt;            &lt;int&gt; &lt;date&gt;      &lt;dbl&gt;\n 1 Ghana          Annual GDP growth ra‚Ä¶ NY.GDP.MKTP.KD.‚Ä¶  1960 1960-01-01 NA    \n 2 Ghana          Annual GDP growth ra‚Ä¶ NY.GDP.MKTP.KD.‚Ä¶  1961 1961-01-01  3.43 \n 3 Ghana          Annual GDP growth ra‚Ä¶ NY.GDP.MKTP.KD.‚Ä¶  1962 1962-01-01  4.11 \n 4 Ghana          Annual GDP growth ra‚Ä¶ NY.GDP.MKTP.KD.‚Ä¶  1963 1963-01-01  4.41 \n 5 Ghana          Annual GDP growth ra‚Ä¶ NY.GDP.MKTP.KD.‚Ä¶  1964 1964-01-01  2.21 \n 6 Ghana          Annual GDP growth ra‚Ä¶ NY.GDP.MKTP.KD.‚Ä¶  1965 1965-01-01  1.37 \n 7 Ghana          Annual GDP growth ra‚Ä¶ NY.GDP.MKTP.KD.‚Ä¶  1966 1966-01-01 -4.26 \n 8 Ghana          Annual GDP growth ra‚Ä¶ NY.GDP.MKTP.KD.‚Ä¶  1967 1967-01-01  3.08 \n 9 Ghana          Annual GDP growth ra‚Ä¶ NY.GDP.MKTP.KD.‚Ä¶  1968 1968-01-01  0.369\n10 Ghana          Annual GDP growth ra‚Ä¶ NY.GDP.MKTP.KD.‚Ä¶  1969 1969-01-01  6.01 \n# ‚Ñπ 1,420 more rows\n\n\nWe have out time series tsibble ready!. But there are some nuances in the data the first obvious ones are the column names- Country Name, Indicator Name and Indicator Code-we see that they are surrounded in back ticks (`) . This tells us that they do not follow the correct naming convention for variables in R (no spaces between word). The next one is the interval [1D]. The tsibble package thinks our data is supposed to be a daily data because we have a full date with month and days available. We will see how to fix this in the next chapter",
    "crumbs": [
      "Working with Time Series Data",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Tidy Time Series Basics</span>"
    ]
  },
  {
    "objectID": "timegaps.html",
    "href": "timegaps.html",
    "title": "5¬† Dealing with Time Gaps and Irregularities",
    "section": "",
    "text": "5.1 Why Time Gaps Matter\nReal-world data is messy. Sensors failz, public holidays happen, data does not get entered. This leads to gaps in your time series ‚Äì missing entries in the index where we expect a measurement. Traditional data frames ignore this, but tsibble helps you find and handle them.\nMany time series models and visualisations assume regular spaced data. Gaps can lead to errors, misleading plots and inaccurate forecasts.",
    "crumbs": [
      "Working with Time Series Data",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Dealing with Time Gaps and Irregularities</span>"
    ]
  },
  {
    "objectID": "timegaps.html#how-tsibble-helps",
    "href": "timegaps.html#how-tsibble-helps",
    "title": "5¬† Dealing with Time Gaps and Irregularities",
    "section": "\n5.2 How tsibble Helps",
    "text": "5.2 How tsibble Helps\nWe can check the time gaps in our tsibble using the scan_gaps function from the tsibble package. This is a very handy function that compares our actual data against a complete regular timeline and tells us exactly what is missing. Other equally useful functions for handling time gaps include count_gaps and has_gaps.\nWe will scan our gh_ts tsibble to check if there are gaps. But before that, we will fix the column names with janitor::clean_names() to avoid complications later on in our analysis due to the unconventional column names.\n\ngh_ts &lt;- gh_ts |&gt; \n  janitor::clean_names() \n\ngh_ts |&gt; scan_gaps()\n\n# A tsibble: 512,864 x 2 [1D]\n# Key:       indicator_name [22]\n   indicator_name         date      \n   &lt;chr&gt;                  &lt;date&gt;    \n 1 Annual GDP growth rate 1960-01-02\n 2 Annual GDP growth rate 1960-01-03\n 3 Annual GDP growth rate 1960-01-04\n 4 Annual GDP growth rate 1960-01-05\n 5 Annual GDP growth rate 1960-01-06\n 6 Annual GDP growth rate 1960-01-07\n 7 Annual GDP growth rate 1960-01-08\n 8 Annual GDP growth rate 1960-01-09\n 9 Annual GDP growth rate 1960-01-10\n10 Annual GDP growth rate 1960-01-11\n# ‚Ñπ 512,854 more rows\n\n\nthe scan gaps returns a long list of missing dates. However, this is not true for our data set. We are getting this many gaps because the inner workings of tsibble thinks that the days of all the months a missing, meanwhile our data is not a daily data but a yearly series. This whole misinterpretation comes from the incorrect interval [1D]. To fix this we can change the date to a year-month format or use the year column as the index and then rescan for gaps\n\n# fix interval  by assigning index to year\ngh_ts |&gt; \n  as_tsibble(\n    index = year\n  ) |&gt; head(2)\n\n# A tsibble: 2 x 6 [1Y]\n# Key:       indicator_name [1]\n  country_name indicator_name         indicator_code     year date       value\n  &lt;chr&gt;        &lt;chr&gt;                  &lt;chr&gt;             &lt;dbl&gt; &lt;date&gt;     &lt;dbl&gt;\n1 Ghana        Annual GDP growth rate NY.GDP.MKTP.KD.ZG  1960 1960-01-01 NA   \n2 Ghana        Annual GDP growth rate NY.GDP.MKTP.KD.ZG  1961 1961-01-01  3.43\n\n\nHere we see that the interval is now correctly represented a [1Y] which is exactly what we expect. We do not want to change our index variable so what we will do is keep the date as index but modify it somehow for it to be recognised as a year interval.\n\ngh_ts &lt;- gh_ts |&gt; \n  mutate(date = yearmonth(date))\n\ngh_ts |&gt; head(3)\n\n# A tsibble: 3 x 6 [12M]\n# Key:       indicator_name [1]\n  country_name indicator_name         indicator_code     year     date value\n  &lt;chr&gt;        &lt;chr&gt;                  &lt;chr&gt;             &lt;dbl&gt;    &lt;mth&gt; &lt;dbl&gt;\n1 Ghana        Annual GDP growth rate NY.GDP.MKTP.KD.ZG  1960 1960 Jan NA   \n2 Ghana        Annual GDP growth rate NY.GDP.MKTP.KD.ZG  1961 1961 Jan  3.43\n3 Ghana        Annual GDP growth rate NY.GDP.MKTP.KD.ZG  1962 1962 Jan  4.11\n\n\nOur interval is [12M]-meaning 12 months, essentially indicating a year. We can go ahead and check for gaps now.\n\ngh_ts |&gt; scan_gaps()\n\n# A tsibble: 0 x 2 [?]\n# Key:       indicator_name [0]\n# ‚Ñπ 2 variables: indicator_name &lt;chr&gt;, date &lt;mth&gt;\n\n\nThis returns an empty tsibble, telling us that there are no time gaps. we can confirm again with the has_gaps() function.\n\ngh_ts |&gt; has_gaps() |&gt; \n  pull(.gaps) |&gt; sum()\n\n[1] 0\n\n\nConfirms Zero Gaps in our gh_ts data!",
    "crumbs": [
      "Working with Time Series Data",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Dealing with Time Gaps and Irregularities</span>"
    ]
  },
  {
    "objectID": "timegaps.html#handling-time-gaps",
    "href": "timegaps.html#handling-time-gaps",
    "title": "5¬† Dealing with Time Gaps and Irregularities",
    "section": "\n5.3 Handling Time Gaps",
    "text": "5.3 Handling Time Gaps\nIn order for us to understand the concept of time gaps and how to handle to properly I will simulate a data with implicit time gaps and then we will see how to deal with them using functions from the tsibble package\nWe will use the same product sales concept to simulate this series. Here we compare sales for 2 products Smart Phone and Laptop over a 12 month period\n\n# create a sequence of sales dates\nstart_date &lt;- ym('2025-01')  \nend_date &lt;- ym('2025-12')\nsales_period &lt;- seq.Date(\n  from = start_date,\n  to = end_date,\n  by = 'month'\n) |&gt; \n  yearmonth()     # change format to year-month\n\n# simulate data with missing dates for different products\nsales_data_gaps &lt;- tsibble(\n  Product = c(rep('Smart Phone', 10), rep('Laptop', 8)),\n  Sales = round(c(rnorm(10,300,65), runif(8, 620, 1000))),\n  Date = c(\n    sales_period[c(1:5,8:12)],      # Smart phone is missing Jun & Jul\n    sales_period[c(2,3,4,5,6,9:11)] # Laptop is missing Jan, Jul, Aug & Dec\n  ),\n  index = Date,\n  key = Product\n)\n\nprint(sales_data_gaps)\n\n# A tsibble: 18 x 3 [1M]\n# Key:       Product [2]\n   Product     Sales     Date\n   &lt;chr&gt;       &lt;dbl&gt;    &lt;mth&gt;\n 1 Laptop        970 2025 Feb\n 2 Laptop        660 2025 Mar\n 3 Laptop       1000 2025 Apr\n 4 Laptop        775 2025 May\n 5 Laptop        799 2025 Jun\n 6 Laptop        666 2025 Sep\n 7 Laptop        726 2025 Oct\n 8 Laptop        991 2025 Nov\n 9 Smart Phone   255 2025 Jan\n10 Smart Phone   244 2025 Feb\n11 Smart Phone   335 2025 Mar\n12 Smart Phone   287 2025 Apr\n13 Smart Phone   379 2025 May\n14 Smart Phone   359 2025 Aug\n15 Smart Phone   286 2025 Sep\n16 Smart Phone   286 2025 Oct\n17 Smart Phone   345 2025 Nov\n18 Smart Phone   280 2025 Dec\n\n\nOur simulated tsibble (sales_data_gaps) is now ready. I visual inspection of the Date column will reveal that there are missing dates (implicit). we can confirm this with the functions we learnt earlier and then decide what to do later.\n\nscan_gaps(sales_data_gaps)\n\n# A tsibble: 4 x 2 [1M]\n# Key:       Product [2]\n  Product         Date\n  &lt;chr&gt;          &lt;mth&gt;\n1 Laptop      2025 Jul\n2 Laptop      2025 Aug\n3 Smart Phone 2025 Jun\n4 Smart Phone 2025 Jul\n\n\nThe scan gaps tells us the gaps in our data. Notice how it is only showing only 2 months are missing for Laptop even though we know there are 4 months missing rather. We will see how to handle this very soon.\n\n\n\n\n\n\nImportant\n\n\n\nThe tsibble assumes that our data only starts from Feb and Ends in Nov for the Laptop Product.\n\n\nThe tsibble package makes it really easy to handle gaps in our time series data with the fill_gaps() function. The fill_gaps() makes the implicit gaps explicit by inserting rows for missing time periods and assigning NA to the observation values (the Sales column in our case)\n\n# fill in the missing time points \nsales_data_gaps |&gt; \n  fill_gaps() |&gt; pull(Date)\n\n&lt;yearmonth[22]&gt;\n [1] \"2025 Feb\" \"2025 Mar\" \"2025 Apr\" \"2025 May\" \"2025 Jun\" \"2025 Jul\"\n [7] \"2025 Aug\" \"2025 Sep\" \"2025 Oct\" \"2025 Nov\" \"2025 Jan\" \"2025 Feb\"\n[13] \"2025 Mar\" \"2025 Apr\" \"2025 May\" \"2025 Jun\" \"2025 Jul\" \"2025 Aug\"\n[19] \"2025 Sep\" \"2025 Oct\" \"2025 Nov\" \"2025 Dec\"\n\n\nThe fill_gaps() function filled only the gaps which were identified by the scan_gaps function evidenced by only 22 time points instead of 24.\nSo you might be wondering, how do we deal with the missing Jan and Dec.¬†Well! the fill_gaps() function creates provision for such cases. The function can even help us set a start/ending time that allows us to expand the existing time span (we are not doing that).\nBack to our issue, we can set .full = TRUE inside fill_gaps to fill the time gaps over the entire time span of our data. What it does is, it checks the time span for Smart Phone and notices that it starts from Jan and ends in Dec so it applies the same time span to Laptops\n\n# fill gaps over entire time span\nsales_data_filled &lt;- sales_data_gaps |&gt; \n  fill_gaps(.full = TRUE)\n\nAlso, instead of assigning the values of the filled time gaps with NAs we can specify a value of our choosing which is very useful if we want to record zero (0) sales for the missing months instead of missing data.\n\n# fill gaps in Sales column with 0\nsales_data_gaps |&gt; \n  fill_gaps(\n    .full = TRUE,\n    Sales = 0\n  )\n\nNow, all missing time points have a Sales value of 0 instead of NA. This can be crucial for consistent time series modelling or calculations. Sometimes too the data might not have time gaps but rather missing values for a particular time period. We can deal with them by filtering out complete cases (which automatically introduces time gaps) or use models that can handle NAs within a time series data. The later choice would not help much. Since we will not go into imputing missing data my advice is to rely on the fill_gaps() and replacing NAs with zeros.\n\n\n\n\n\n\nTip\n\n\n\nthe imputeTS package provides several robust methods for estimating missing values in a time series data.\n\n\n\n\n\n\n\n\nCaution\n\n\n\nAlways apply domain knowledge and check time series data characteristics before applying a particular imputation method from imputeTS\n\n\nThe next chapter is a bonus one. It briefly describes how to import data (time series data) into R from various sources with a simple code illustration.",
    "crumbs": [
      "Working with Time Series Data",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Dealing with Time Gaps and Irregularities</span>"
    ]
  }
]