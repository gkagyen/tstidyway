[
  {
    "objectID": "timeseries-basics.html",
    "href": "timeseries-basics.html",
    "title": "4  Tidy Time Series Basics",
    "section": "",
    "text": "4.1 What is a tsibble\nAt its core, a time series is just a data where when it was collected is a crucial part of the story. It is a sequence of data points indexed in time and order. Regardless, a time series should still be a tidy data frame. In a tidy dataset (following Hadley Wickham’s principles), Each row is an observation, each column is a variable.\nA tsibble (short for “tidy temporal tibble”) is a special data frame for time series. It extends the tibble data structure by formally declaring one column as the index (the time variable) and optionally, one or more columns as key(s) (unique identifiers for different series)",
    "crumbs": [
      "Working with Time Series Data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidy Time Series Basics</span>"
    ]
  },
  {
    "objectID": "timeseries-basics.html#what-is-a-tsibble",
    "href": "timeseries-basics.html#what-is-a-tsibble",
    "title": "4  Tidy Time Series Basics",
    "section": "",
    "text": "4.1.1 Key terminologies\nIndex: The variable (usually a date/time) that defines the time order of observations\nKey: A variable (or combination of variables) that uniquely identifies different time series within a single table e.g. country, stock_symbol etc.\nInterval: The regular frequency of the measurements e.g. daily, monthly, quarterly etc.\nTo illustrate what we just discussed below is a standard dataframe with a date column. This data is not time aware yet (not a time series)\n\n\n# A tibble: 4 × 3\n  date       product sales\n  &lt;date&gt;     &lt;chr&gt;   &lt;dbl&gt;\n1 2023-01-01 A         120\n2 2023-01-02 A         145\n3 2023-01-01 B          88\n4 2023-01-02 B         102\n\n\na tsibble on the other hand is self-aware. It knows its index and its key, unlocking powerful analysis tool. compare the table below. The [1D] beside the tsibble dimension represents the interval (daily)\n\n\n# A tsibble: 4 x 3 [1D]\n# Key:       product [2]\n  date       product sales\n  &lt;date&gt;     &lt;chr&gt;   &lt;dbl&gt;\n1 2023-01-01 A         120\n2 2023-01-02 A         145\n3 2023-01-01 B          88\n4 2023-01-02 B         102",
    "crumbs": [
      "Working with Time Series Data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidy Time Series Basics</span>"
    ]
  },
  {
    "objectID": "timeseries-basics.html#creating-and-converting-data-into-a-tsibble",
    "href": "timeseries-basics.html#creating-and-converting-data-into-a-tsibble",
    "title": "4  Tidy Time Series Basics",
    "section": "\n4.2 Creating and Converting Data into a tsibble\n",
    "text": "4.2 Creating and Converting Data into a tsibble\n\ncreating a tsibble follows the same procedure as creating a normal data frame using the tsibble() function or simply from an existing data frame or tibble using the as_tsibble() function.\nAs explained earlier, these two functions require you to specify at least one of these two things (index or key) or both depending on your data.\nWe see how to create a tsibble from using tsibble() and as_tsibble below\n\n# single time series\ntsibble(\n  year = 2010:2050,\n  value = rnorm(41),\n  index = year\n)\n\n# A tsibble: 41 x 2 [1Y]\n    year   value\n   &lt;int&gt;   &lt;dbl&gt;\n 1  2010  0.449 \n 2  2011  1.60  \n 3  2012  1.20  \n 4  2013  1.04  \n 5  2014  0.173 \n 6  2015 -0.703 \n 7  2016 -0.0220\n 8  2017  0.487 \n 9  2018 -0.535 \n10  2019  0.222 \n# ℹ 31 more rows\n\n\nThe above code creates a simple time series data using the tsibble() function, exactly like creating a dataframe. Indicating the index variable distinguishes a tsibble from a tibble.\nNow we will create a tsibble from the as_tsibble() function using an existing tibble\n\n# creating a tsibble from monthly data sales\n# sales come from two different shops\nsales_data &lt;- tibble(\n  Date = ymd(c('2025-01-01','2025-02-01','2025-03-01','2026-04-01','2025-05-01','2025-01-01','2025-02-01','2025-03-01','2025-04-01','2025-05-01')),\n  Store = rep(c('Phone Shop', 'Beauty Shop'), each = 5),\n  Sales = c(225, 150, 130, 90, 220, 190, 145, 180, 110, 180)\n)\nprint(sales_data)\n\n# A tibble: 10 × 3\n   Date       Store       Sales\n   &lt;date&gt;     &lt;chr&gt;       &lt;dbl&gt;\n 1 2025-01-01 Phone Shop    225\n 2 2025-02-01 Phone Shop    150\n 3 2025-03-01 Phone Shop    130\n 4 2026-04-01 Phone Shop     90\n 5 2025-05-01 Phone Shop    220\n 6 2025-01-01 Beauty Shop   190\n 7 2025-02-01 Beauty Shop   145\n 8 2025-03-01 Beauty Shop   180\n 9 2025-04-01 Beauty Shop   110\n10 2025-05-01 Beauty Shop   180\n\n\n\n# We use as_tsibble to convert the tibble to a tsibble\n# the date column becomes the index and the store column the key\nsales_data_ts &lt;- sales_data |&gt; \n  mutate(Date = yearmonth(Date)) |&gt;\n  as_tsibble(\n    index = Date,\n    key = Store\n  )\nprint(sales_data_ts)\n\n# A tsibble: 10 x 3 [1M]\n# Key:       Store [2]\n       Date Store       Sales\n      &lt;mth&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1 2025 Jan Beauty Shop   190\n 2 2025 Feb Beauty Shop   145\n 3 2025 Mar Beauty Shop   180\n 4 2025 Apr Beauty Shop   110\n 5 2025 May Beauty Shop   180\n 6 2025 Jan Phone Shop    225\n 7 2025 Feb Phone Shop    150\n 8 2025 Mar Phone Shop    130\n 9 2025 May Phone Shop    220\n10 2026 Apr Phone Shop     90\n\n\nWe now have our sales data in a time aware tsibble format. The yearmonth() is an index function to represent our Date in a year-month format.\n\n4.2.1 Practice tsibble conversion\nHere we will learn how to convert real world data into a tsibble. The data we will use is a time series data for Ghana containing certain world bank indicators. The data can be found here gh_data.csv. The data comes in a wide format (where years are columns). To make it tidy, where each row represents one indicator so that we a year and value column, we first need to reshape it into a long format\nWe will use pivot_longer from tidyr to reshape the data\n\n# load data\ngh_data_raw &lt;- read_csv('data/gh_data.csv', show_col_types = FALSE) \n  \n# convert wide data to long\ngh_data_long &lt;- gh_data_raw |&gt; \n  pivot_longer(\n    cols = starts_with(c('19','20')), # select all date columns\n    names_to = \"Year\",                # New column for years\n    values_to = 'Value'               # New column for values\n  )\n\n# View the first few rows\nhead(gh_data_long)\n\n# A tibble: 6 × 5\n  `Country Name` `Indicator Name` `Indicator Code` Year    Value\n  &lt;chr&gt;          &lt;chr&gt;            &lt;chr&gt;            &lt;chr&gt;   &lt;dbl&gt;\n1 Ghana          Population_total SP.POP.TOTL      1960  6961215\n2 Ghana          Population_total SP.POP.TOTL      1961  7162667\n3 Ghana          Population_total SP.POP.TOTL      1962  7337375\n4 Ghana          Population_total SP.POP.TOTL      1963  7514714\n5 Ghana          Population_total SP.POP.TOTL      1964  7695739\n6 Ghana          Population_total SP.POP.TOTL      1965  7882606\n\n\nSuccess! Now each row is an observation of an indicator in a given year\nThe next step is to convert the Year to a Proper Date. Right now Year is a character. We need it as a date so tsibble can understand time ordering. we will use the lubridate package functions and convert it to a Date object (assuming January 1st of each year).\n\n# convert year to date\ngh_data_long &lt;-  gh_data_long |&gt; \n  mutate(\n    Year = as.integer(Year),                      # convert to integer number\n    Date = lubridate::ymd(paste0(Year, \"-01-01\")), # Create date:Jan 1 of each year\n    .after = Year                                 # add new Date column after year column\n  )\n\n# check structure\nstr(gh_data_long$Date)\n\n Date[1:1430], format: \"1960-01-01\" \"1961-01-01\" \"1962-01-01\" \"1963-01-01\" \"1964-01-01\" ...\n\n\nNow Date is a proper Date object essential for time series analysis.\nFinally we can convert our data to a time series dataframe (tsibble) that is time aware of - index (time)and keys (unique series identifiers). In our case the Date column is our index and the Indicator_name becomes our index since we have multiple time series -population, life expectancy etc.\n\n# convert data to tsibble\ngh_ts &lt;- gh_data_long |&gt; \n  as_tsibble(\n    index = Date,              # Time index\n    key = `Indicator Name`     # Key column: each indicator is a separate series\n  )\n\n# View the tsibble\ngh_ts\n\n# A tsibble: 1,430 x 6 [1D]\n# Key:       Indicator Name [22]\n   `Country Name` `Indicator Name`      `Indicator Code`  Year Date        Value\n   &lt;chr&gt;          &lt;chr&gt;                 &lt;chr&gt;            &lt;int&gt; &lt;date&gt;      &lt;dbl&gt;\n 1 Ghana          Annual GDP growth ra… NY.GDP.MKTP.KD.…  1960 1960-01-01 NA    \n 2 Ghana          Annual GDP growth ra… NY.GDP.MKTP.KD.…  1961 1961-01-01  3.43 \n 3 Ghana          Annual GDP growth ra… NY.GDP.MKTP.KD.…  1962 1962-01-01  4.11 \n 4 Ghana          Annual GDP growth ra… NY.GDP.MKTP.KD.…  1963 1963-01-01  4.41 \n 5 Ghana          Annual GDP growth ra… NY.GDP.MKTP.KD.…  1964 1964-01-01  2.21 \n 6 Ghana          Annual GDP growth ra… NY.GDP.MKTP.KD.…  1965 1965-01-01  1.37 \n 7 Ghana          Annual GDP growth ra… NY.GDP.MKTP.KD.…  1966 1966-01-01 -4.26 \n 8 Ghana          Annual GDP growth ra… NY.GDP.MKTP.KD.…  1967 1967-01-01  3.08 \n 9 Ghana          Annual GDP growth ra… NY.GDP.MKTP.KD.…  1968 1968-01-01  0.369\n10 Ghana          Annual GDP growth ra… NY.GDP.MKTP.KD.…  1969 1969-01-01  6.01 \n# ℹ 1,420 more rows",
    "crumbs": [
      "Working with Time Series Data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Tidy Time Series Basics</span>"
    ]
  }
]